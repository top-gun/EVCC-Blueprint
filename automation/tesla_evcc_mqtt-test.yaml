blueprint:
  name: EVCC Communication Tesla BLE
  description: Publishes Tesla BLE sensor states to MQTT every 10 seconds and controls a wallbox based on MQTT messages.
  domain: automation
  input:
    tesla_device:
      name: Tesla BLE Device
      description: Select the ESPHome-provided device for the Tesla BLE integration.
      selector:
        device:
          integration: esphome
    instance_number:
      name: Instance Number
      description: The number to use in MQTT topic paths (e.g., ha-evcc/<number>/...).
      default: 1
      selector:
        number:
          min: 1
          max: 99
          step: 1
          mode: box
    wb_enable_request_suffix:
      name: Wallbox Enable Request Topic Suffix
      description: Modifiable suffix for the wallbox enable/disable request topic (starts with wb_).
      default: wb-enable-request
      selector:
        text:
    max_charge_requested_suffix:
      name: Max Charge Requested Topic Suffix
      description: Modifiable suffix for the max charge requested topic.
      default: max-charge-requested
      selector:
        text:
variables:
  device_id: !input tesla_device
  instance_number: !input instance_number
trigger:
  - platform: time_pattern
    seconds: /10
    id: publish_sensors
  - platform: mqtt
    topic: ha-evcc/{{ instance_number }}/{{ !input wb_enable_request_suffix }}
    id: wb_enable_request
  - platform: mqtt
    topic: ha-evcc/{{ instance_number }}/{{ !input max_charge_requested_suffix }}
    id: max_charge_requested
condition: []
action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'publish_sensors' }}"
        sequence:
          - alias: MQTT publish Tesla charge limit
            action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: ha-evcc/{{ instance_number }}/tesla-soc-limit
              payload: "{{ states(device_entities(device_id) | select('match', '.*_charge_limit$') | first) | int }}"
            metadata: {}
          - alias: MQTT publish Tesla range
            action: mqtt.publish
            data:
              qos: 1
              retain: false
              topic: ha-evcc/{{ instance_number }}/tesla-range
              payload: "{{ states(device_entities(device_id) | select('match', '.*_range$') | first) | int }}"
            metadata: {}
          - alias: MQTT publish Tesla charge status
            action: mqtt.publish
            data:
              qos: 1
              retain: false
              topic: ha-evcc/{{ instance_number }}/tesla-charge-status
              payload: "{{ {'Disconnected':'a','Ready':'b','Charging':'c','Stopped':'b','No Power':'b','Complete':'b','Error':'f'}[states(device_entities(device_id) | select('match', '.*_charging_state$') | first)] }}"
            metadata: {}
            enabled: true
          - alias: MQTT publish Tesla odometer
            action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: ha-evcc/{{ instance_number }}/tesla-odometer
              payload: "{{ states(device_entities(device_id) | select('match', '.*_odometer$') | first) | int }}"
            metadata: {}
          - alias: MQTT publish Tesla finish time
            action: mqtt.publish
            data:
              qos: 1
              retain: false
              topic: ha-evcc/{{ instance_number }}/tesla-finishtime
              payload: "{{ (now() + timedelta(minutes=states(device_entities(device_id) | select('match', '.*_minutes_to_limit$') | first) | int)) | string }}"
            metadata: {}
          - alias: MQTT publish Tesla SOC
            action: mqtt.publish
            data:
              qos: 1
              retain: false
              topic: ha-evcc/{{ instance_number }}/tesla-soc
              payload: "{{ states(device_entities(device_id) | select('match', '.*_charge_level$') | first) | float }}"
            metadata: {}
          - alias: MQTT publish Tesla charger state
            action: mqtt.publish
            data:
              qos: 1
              retain: false
              topic: ha-evcc/{{ instance_number }}/tesla-charger
              payload: "{{ '1' if states(device_entities(device_id) | select('match', 'switch.*_charger$') | first) == 'on' else '0' }}"
            metadata: {}
          - alias: MQTT publish Tesla charge power
            action: mqtt.publish
            data:
              qos: 1
              retain: false
              topic: ha-evcc/{{ instance_number }}/tesla-charge-power
              payload: "{{ states(device_entities(device_id) | select('match', '.*_charge_power$') | first) | float }}"
            metadata: {}
          - alias: MQTT publish Tesla energy added
            action: mqtt.publish
            data:
              qos: 1
              retain: false
              topic: ha-evcc/{{ instance_number }}/tesla-energy-added
              payload: "{{ states(device_entities(device_id) | select('match', '.*_charge_energy_added$') | first) | float }}"
            metadata: {}
          - alias: MQTT publish Tesla charge current
            action: mqtt.publish
            data:
              qos: 1
              retain: false
              topic: ha-evcc/{{ instance_number }}/tesla-charge-current
              payload: "{{ states(device_entities(device_id) | select('match', '.*_charge_current$') | first) | float }}"
            metadata: {}
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'wb_enable_request' }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ trigger.payload | bool }}"
            then:
              - action: switch.turn_on
                metadata: {}
                data: {}
                target:
                  entity_id: "{{ device_entities(device_id) | select('match', 'switch.*_charger$') | first }}"
            else:
              - action: switch.turn_off
                metadata: {}
                data: {}
                target:
                  entity_id: "{{ device_entities(device_id) | select('match', 'switch.*_charger$') | first }}"
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'max_charge_requested' }}"
          - condition: state
            entity_id: "{{ device_entities(device_id) | select('match', '.*_charging_state$') | first }}"
            state: Charging
        sequence:
          - action: number.set_value
            data:
              value: "{{ trigger.payload | int }}"
            target:
              entity_id: "{{ device_entities(device_id) | select('match', 'number.*_charging_amps$') | first }}"
mode: single
