blueprint:
  name: Tesla EVCC MQTT Status (Entity-Selector, Endung gefiltert)
  description: >
    Sendet SOC, SOC-Limit, Reichweite und Ladezustand eines Tesla-Fahrzeugs per MQTT.
    Nutzer wählt die Charging-State-Entität aus. Alle anderen Entitäten werden automatisch abgeleitet.
  domain: automation

  input:
    main_entity:
      name: Tesla Charging State Sensor
      description: Wähle die Entität mit dem Ladestatus (z. B. "..._charging_state")
      selector:
        entity:
          domain: sensor
          filter:
            name: ".*charging_state$"
    mqtt_prefix:
      name: MQTT Topic Prefix
      description: Basis-Topic für alle Statusmeldungen
      default: ha-pv/1
      selector:
        text:

trigger:
  - platform: time_pattern
    seconds: /10

action:
  - variables:
      # Präfix aus der Haupt-Entität ableiten
      prefix: >-
        {{ main_entity.rsplit('_', 1)[0] }}

      # Alle relevanten Sensoren
      soc_sensor: >-
        {{ prefix + '_charge_level' }}
      soc_limit_sensor: >-
        {{ prefix + '_charge_limit' }}
      range_sensor: >-
        {{ prefix + '_range' }}
      charge_state_sensor: >-
        {{ main_entity }}

      # MQTT Werte vorbereiten
      values: >-
        {{
          {
            (mqtt_prefix ~ '/tesla-soc'): (states(soc_sensor)|float if states(soc_sensor) else 0),
            (mqtt_prefix ~ '/tesla-soc-limit'): (states(soc_limit_sensor)|int if states(soc_limit_sensor) else 0),
            (mqtt_prefix ~ '/tesla-range'): (states(range_sensor)|int if states(range_sensor) else 0),
            (mqtt_prefix ~ '/tesla-charge-status'): (
              {
                "Disconnected":"a",
                "Ready":"b",
                "Charging":"c",
                "Stopped":"d",
                "Complete":"d",
                "Error":"f"
              }[states(charge_state_sensor)] if states(charge_state_sensor) else "a"
            )
          }
        }}

  - repeat:
      for_each: "{{ values | dict2items }}"
      sequence:
        - service: mqtt.publish
          data:
            topic: "{{ repeat.item.key }}"
            payload: "{{ repeat.item.value }}"
            qos: 0
            retain: false

mode: single
