blueprint:
  name: Tesla EVCC MQTT Status (ESPHome Device)
  description: Sendet automatisch SOC, SOC-Limit, Reichweite und Ladezustand eines Tesla Fahrzeugs per MQTT. Nutzer w채hlt nur das ESPHome-Fahrzeug-Device aus.
  domain: automation

  input:
    vehicle_device:
      name: Tesla Fahrzeug (ESPHome)
      description: W채hle das ESPHome-Fahrzeug-Device aus. Alle Sensoren werden automatisch ermittelt.
      selector:
        entity:
          domain: sensor
          filter:
            name: ".*Charging$"

          

    mqtt_prefix:
      name: MQTT Topic Prefix
      description: Basis-Topic f체r alle Statusmeldungen
      default: ha-pv/1
      selector:
        text:

trigger:
  - platform: time_pattern
    seconds: /10

action:
  - variables:
      # Entit채ten automatisch aus dem Device ermitteln
      soc_sensor: >
        {% set s = expand(device_attr(input.vehicle_device, 'entities')) 
           | selectattr('entity_id','search','charge_level') | list %}
        {{ s[0].entity_id if s else None }}
      soc_limit_sensor: >
        {% set s = expand(device_attr(input.vehicle_device, 'entities')) 
           | selectattr('entity_id','search','charge_limit') | list %}
        {{ s[0].entity_id if s else None }}
      range_sensor: >
        {% set s = expand(device_attr(input.vehicle_device, 'entities')) 
           | selectattr('entity_id','search','range') | list %}
        {{ s[0].entity_id if s else None }}
      charge_state_sensor: >
        {% set s = expand(device_attr(input.vehicle_device, 'entities')) 
           | selectattr('entity_id','search','charging_state') | list %}
        {{ s[0].entity_id if s else None }}

      # MQTT Werte vorbereiten
      values:
        "{{ input.mqtt_prefix }}/tesla-soc": "{{ states(soc_sensor)|
