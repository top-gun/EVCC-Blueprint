blueprint:
  name: EVCC – Tesla Status an MQTT senden
  description: Sendet die relevanten Tesla-BLE-Sensordaten regelmäßig per MQTT.
  domain: automation
  input:
    tesla_device:
      name: Tesla BLE Gerät
      description: Wähle dein Tesla BLE-Gerät aus.
      selector:
        device:
          integration: ble_monitor   # oder die Integration, die dein Tesla-BLE-Sensor liefert
          entity:
            domain: sensor

alias: EVCC-Sende-Tesla-Status
description: ""
trigger:
  - platform: time_pattern
    seconds: "/10"

action:
  - service: mqtt.publish
    data:
      topic: ha-pv/1/tesla-soc
      payload: "{{ states(device_entities(tesla_device) | select('search','_charge_level') | list | first) | float }}"

  - service: mqtt.publish
    data:
      topic: ha-pv/1/tesla-soc-limit
      payload: "{{ states(device_entities(tesla_device) | select('search','_charge_limit') | list | first) | int }}"

  - service: mqtt.publish
    data:
      topic: ha-pv/1/tesla-range
      payload: "{{ states(device_entities(tesla_device) | select('search','_range') | list | first) | int }}"

  - service: mqtt.publish
    data:
      topic: ha-pv/1/tesla-charge-status
      payload: >-
        {{
          {"Disconnected":"a","Ready":"b","Charging":"c","Stopped":"d","Complete":"b","Error":"f"}[
            states(device_entities(tesla_device) | select('search','_charging_state') | list | first)
          ]
        }}

  - service: mqtt.publish
    data:
      topic: ha-pv/1/tesla-odometer
      payload: "{{ states(device_entities(tesla_device) | select('search','_odometer') | list | first) | int }}"
