blueprint:
  name: Tesla BLE MQTT Publisher
  description: Publishes Tesla BLE sensor states to MQTT topics every 10 seconds.
  domain: automation
  input:
    tesla_device:
      name: Tesla BLE Device
      description: Select the Tesla BLE device to monitor.
      selector:
        device:
trigger:
  - platform: time_pattern
    seconds: /10
condition: []
action:
  - alias: MQTT publish Tesla Battery SOC
    action: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: ha-evcc-test/1/tesla-soc
      payload: "{{ states(device_entities(device_id) | select('match', '.*_charge_level$') | first)|float }}"
    metadata: {}
  - alias: MQTT publish Tesla charge limit
    action: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: ha-evcc-test/1/tesla-soc-limit
      payload: "{{ states(device_entities(device_id) | select('match', '.*_charge_limit$') | first)|int }}"
    metadata: {}
  - alias: MQTT publish Tesla range
    action: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: ha-evcc-test/1/tesla-range
      payload: "{{ states(device_entities(device_id) | select('match', '.*_range$') | first)|int }}"
    metadata: {}
  - alias: MQTT publish Tesla charge status
    action: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: ha-evcc-test/1/tesla-charge-status
      payload: >-
        {{
        {"disconnected":"a","ready":"b","charging":"c","stopped":"d","complete":"b","error":"f"}[states(device_entities(device_id) | select('match', '.*_charging_state$') | first)|lower]
        }}
    metadata: {}
    enabled: true
  - alias: MQTT publish Tesla odometer
    action: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: ha-evcc-test/1/tesla-odometer
      payload: "{{ states(device_entities(device_id) | select('match', '.*_odometer$') | first)|int }}"
    metadata: {}
  - alias: MQTT publish Tesla finish time
    action: mqtt.publish
    data:
      qos: 1
      retain: false
      topic: ha-evcc-test/1/tesla-finishtime
      payload: "{{ states('sensor.evcc_wallbox_current_request') }}"
    metadata: {}
variables:
  device_id: !input tesla_device
mode: single
