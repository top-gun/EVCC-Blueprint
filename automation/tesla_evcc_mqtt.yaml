blueprint:
  name: EVCC Communication for Tesla BLE
  description: Automates MQTT communication for Tesla BLE devices with EVCC, allowing customizable device and topic settings.
  domain: automation
  input:
    tesla_device:
      name: Tesla Device
      description: Select the Tesla device from the ESPHome integration.
      selector:
        device:
          integration: esphome
    number:
      name: Number
      description: Number to replace '/1/' in MQTT topics.
      default: "1"
      selector:
        text:
    wb_enable_topic:
      name: Wallbox Enable/Disable Topic
      description: MQTT topic for wallbox enable/disable requests.
      default: ha-evcc/1/wb-enable-request
      selector:
        text:
    max_charge_topic:
      name: Max Charge Requested Topic
      description: MQTT topic for max charge requested.
      default: ha-evcc/1/max-charge-requested
      selector:
        text:

variables:
  tesla_device_id: !input tesla_device
  number: !input number
  wb_enable_topic: !input wb_enable_topic
  max_charge_topic: !input max_charge_topic
  charge_limit_sensor: "{{ device_entities(tesla_device_id) | select('match', 'sensor.*_charge_limit$') | first }}"
  range_sensor: "{{ device_entities(tesla_device_id) | select('match', 'sensor.*_range$') | first }}"
  charging_state_sensor: "{{ device_entities(tesla_device_id) | select('match', 'sensor.*_charging_state$') | first }}"
  odometer_sensor: "{{ device_entities(tesla_device_id) | select('match', 'sensor.*_odometer$') | first }}"
  minutes_to_limit_sensor: "{{ device_entities(tesla_device_id) | select('match', 'sensor.*_minutes_to_limit$') | first }}"
  charge_level_sensor: "{{ device_entities(tesla_device_id) | select('match', 'sensor.*_charge_level$') | first }}"
  charge_power_sensor: "{{ device_entities(tesla_device_id) | select('match', 'sensor.*_charge_power$') | first }}"
  charge_energy_added_sensor: "{{ device_entities(tesla_device_id) | select('match', 'sensor.*_charge_energy_added$') | first }}"
  charge_current_sensor: "{{ device_entities(tesla_device_id) | select('match', 'sensor.*_charge_current$') | first }}"
  charger_switch: "{{ device_entities(tesla_device_id) | select('match', 'switch.*_charger$') | first }}"
  charging_amps_number: "{{ device_entities(tesla_device_id) | select('match', 'number.*_charging_amps$') | first }}"

triggers:
  - alias: topic received wallbox enable/disable
    trigger: mqtt
    topic: !input wb_enable_topic
  - alias: topic received max-charge-requested
    trigger: mqtt
    topic: !input max_charge_topic
  - trigger: time_pattern
    seconds: /10
    id: publish_sensors
    enabled: true

actions:
  - choose:
      - conditions:
          - alias: 10s abgelaufen
            condition: template
            value_template: "{{ trigger.platform == 'time_pattern' }}"
        sequence:
          - alias: MQTT publish Tesla charge limit
            action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: "{{ 'ha-evcc/' ~ number ~ '/tesla-soc-limit' }}"
              payload: "{{ states(charge_limit_sensor)|int }}"
          - alias: MQTT publish Tesla range
            action: mqtt.publish
            data:
              qos: "1"
              retain: false
              topic: "{{ 'ha-evcc/' ~ number ~ '/tesla-range' }}"
              payload: "{{ states(range_sensor)|int }}"
          - alias: MQTT publish Tesla charge status
            action: mqtt.publish
            data:
              qos: "1"
              retain: false
              topic: "{{ 'ha-evcc/' ~ number ~ '/tesla-charge-status' }}"
              payload: >-
                {{
                {"Disconnected":"a","Ready":"b","Charging":"c","Stopped":"d","No
                Power":"b","Complete":"b","Error":"f"}[states(charging_state_sensor)]
                }}
            enabled: true
          - alias: MQTT publish odometer
            action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: "{{ 'ha-evcc/' ~ number ~ '/tesla-odometer' }}"
              payload: "{{ states(odometer_sensor)|int }}"
          - alias: MQTT publish Tesla minutes to charge limit
            action: mqtt.publish
            data:
              qos: "1"
              retain: false
              topic: "{{ 'ha-evcc/' ~ number ~ '/tesla-finishtime' }}"
              payload: >
                {% set tf = now() +
                timedelta(minutes=states(minutes_to_limit_sensor)|int)
                %} "{{ tf }}"
          - alias: MQTT publish Tesla SOC
            action: mqtt.publish
            data:
              qos: "1"
              retain: false
              topic: "{{ 'ha-evcc/' ~ number ~ '/tesla-soc' }}"
              payload: "{{ states(charge_level_sensor)|float }}"
          - alias: MQTT publish Tesla charger state
            action: mqtt.publish
            data:
              qos: "1"
              retain: false
              topic: "{{ 'ha-evcc/' ~ number ~ '/tesla-charger' }}"
              payload: "{{ states(charging_state_sensor) == 'Charging' }}"
          - alias: MQTT publish Tesla charge power
            action
