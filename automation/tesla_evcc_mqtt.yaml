blueprint:
  name: Tesla BLE MQTT Publisher
  description: Publishes Tesla BLE sensor states to MQTT topics every 10 seconds.
  domain: automation
  input:
    charge_level_sensor:
      name: Tesla Charge Level Sensor
      description: Select the sensor for the Tesla battery state of charge (SOC).
      selector:
        entity:
          domain: sensor
          integration: tesla_ble
    charge_limit_sensor:
      name: Tesla Charge Limit Sensor
      description: Select the sensor for the Tesla charge limit.
      selector:
        entity:
          domain: sensor
          integration: tesla_ble
    range_sensor:
      name: Tesla Range Sensor
      description: Select the sensor for the Tesla range.
      selector:
        entity:
          domain: sensor
          integration: tesla_ble
    charging_state_sensor:
      name: Tesla Charging State Sensor
      description: Select the sensor for the Tesla charging state.
      selector:
        entity:
          domain: sensor
          integration: tesla_ble
    odometer_sensor:
      name: Tesla Odometer Sensor
      description: Select the sensor for the Tesla odometer.
      selector:
        entity:
          domain: sensor
          integration: tesla_ble
  source_url: https://example.com/tesla_ble_mqtt_publish.yaml
trigger:
  - platform: time_pattern
    seconds: /10
condition: []
action:
  - alias: MQTT publish Tesla Battery SOC
    action: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: ha-pv/1/tesla-soc
      payload: "{{ states(!input charge_level_sensor)|float }}"
    metadata: {}
  - alias: MQTT publish Tesla charge limit
    action: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: ha-pv/1/tesla-soc-limit
      payload: "{{ states(!input charge_limit_sensor)|int }}"
    metadata: {}
  - alias: MQTT publish Tesla range
    action: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: ha-pv/1/tesla-range
      payload: "{{ states(!input range_sensor)|int }}"
    metadata: {}
  - alias: MQTT publish Tesla charge status
    action: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: ha-pv/1/tesla-charge-status
      payload: >-
        {{
        {"disconnected":"a","ready":"b","charging":"c","stopped":"d","complete":"b","error":"f"}[states(!input charging_state_sensor)|lower]
        }}
    metadata: {}
    enabled: true
  - alias: MQTT publish Tesla odometer
    action: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: ha-pv/1/tesla-odometer
      payload: "{{ states(!input odometer_sensor)|int }}"
    metadata: {}
  - alias: MQTT publish Tesla finish time
    action: mqtt.publish
    data:
      qos: 1
      retain: false
      topic: ha-pv/1/tesla-finishtime
      payload: "{{ states('sensor.evcc_wallbox_current_request') }}"
    metadata: {}
mode: single
