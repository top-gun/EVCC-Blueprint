blueprint:
  name: Tesla EVCC MQTT Status
  description: >
    Sendet SOC, SOC-Limit, Reichweite und Ladezustand eines Tesla-Fahrzeugs per MQTT.
    Nutzer wählt die Charging-State-Entität aus. Alle anderen Entitäten werden automatisch abgeleitet.
  domain: automation

  input:
    main_entity:
      name: Tesla Charging State Sensor
      description: Wähle die Entität mit dem Ladestatus (z. B. sensor.tesla_ble_xxx_charging_state)
      selector:
        device:
    mqtt_prefix:
      name: MQTT Topic Prefix
      description: Basis-Topic für alle Statusmeldungen
      default: ha-pv/1
      selector:
        text:

trigger:
  - platform: time_pattern
    seconds: /10

action:
  - variables:
      prefix: >-
        {{ main_entity.rsplit('_', 1)[0] }}

      soc_sensor: >-
        {{ prefix + '_charge_level' }}
      soc_limit_sensor: >-
        {{ prefix + '_charge_limit' }}
      range_sensor: >-
        {{ prefix + '_range' }}
      charge_state_sensor: >-
        {{ main_entity }}

  - service: mqtt.publish
    data:
      topic: "{{ mqtt_prefix }}/tesla-soc"
      payload: "{{ states(soc_sensor)|float if states(soc_sensor) else 0 }}"
      qos: 0
      retain: false

  - service: mqtt.publish
    data:
      topic: "{{ mqtt_prefix }}/tesla-soc-limit"
      payload: "{{ states(soc_limit_sensor)|int if states(soc_limit_sensor) else 0 }}"
      qos: 0
      retain: false

  - service: mqtt.publish
    data:
      topic: "{{ mqtt_prefix }}/tesla-range"
      payload: "{{ states(range_sensor)|int if states(range_sensor) else 0 }}"
      qos: 0
      retain: false

  - service: mqtt.publish
    data:
      topic: "{{ mqtt_prefix }}/tesla-charge-status"
      payload: >-
        {{
          {"Disconnected":"a","Ready":"b","Charging":"c","Stopped":"d","Complete":"d","Error":"f"}[states(charge_state_sensor)]
          if states(charge_state_sensor) else "a"
        }}
      qos: 0
      retain: false

mode: single
